// userController.js
const pool = require('../db/db');
const bcrypt = require('bcrypt');

const loginUser = async (req, res) => {
    const { username, password } = req.body;

    try {
        const result = await pool.query('SELECT * FROM users WHERE user_name = $1', [username]);

        if (result.rows.length === 1) {
            const user = result.rows[0];

            // Compare hashed password
            const passwordMatch = await bcrypt.compare(password, user.password);

            if (passwordMatch) {
                // Passwords match, login successful
                res.status(200).json({ success: true, message: 'Login successful' });
            } else {
                // Incorrect password, send error response
                res.status(401).json({ success: false, message: 'Invalid credentials' });
            }
        } else {
            // User not found, send error response
            res.status(401).json({ success: false, message: 'Invalid credentials' });
        }
    } catch (error) {
        console.error('Error executing login query:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
};

const registerUser = async (req, res) => {
    const { user_name, password, email, country, institution } = req.body;

    try {

        const result = await pool.query(
            'INSERT INTO users (user_name, password, email, country, institution) VALUES ($1, $2, $3, $4, $5) RETURNING *',
            [user_name, password, email, country, institution]
        );

        res.status(201).json({ success: true, message: 'Registration successful', user: result.rows[0] });
    } catch (error) {
        console.error('Error executing registration query:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
};

const getRankings = async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM users ORDER BY COALESCE(current_rating, -1) DESC LIMIT 100');
        res.status(200).json({ success: true, users: result.rows });
    } catch (error) {
        console.error('Error fetching rankings:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
};

const getUserProfile = async (req, res) => {
    const { user_name } = req.query;

    try {
        const result = await pool.query('SELECT * FROM users WHERE user_name = $1', [user_name]);

        if (result.rows.length > 0) {
            const userProfile = result.rows[0];
            res.status(200).json({ success: true, userProfile });
        } else {
            res.status(404).json({ success: false, message: 'User not found' });
        }
    } catch (error) {
        console.error('Error fetching user profile:', error);
        res.status(500).json({ success: false, message: 'Internal server error' });
    }
};

module.exports = { loginUser, registerUser, getRankings, getUserProfile };


module.exports = { loginUser, registerUser };

/*
        const result = await pool.query(
            'INSERT INTO users (user_name, password, email, color, current_rating, max_rating, country, institution, registration_date, contribution) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING *',
            [user_name, password, email, 'grey', 0, 0, country, institution, CURRENT_DATE, 0]
        );
*/